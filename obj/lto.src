	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_any
_any:
	call	__frameset0
	ld	iy, (ix + 9)
	ld	de, 0
	ld	bc, 1
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	lea	bc, iy
	jp	p, BB0_2
	push	de
	pop	bc
BB0_2:
	ld	iy, (ix + 6)
BB0_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB0_6
	lea	hl, iy
	add	hl, de
	inc	de
	bit	0, (hl)
	jr	z, BB0_3
	dec	de
	jr	BB0_7
BB0_6:
	push	bc
	pop	de
BB0_7:
	ex	de, hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB0_9
	ld	a, 0
	jr	BB0_10
BB0_9:
	ld	a, -1
BB0_10:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_adjustParam
_adjustParam:
	call	__frameset0
	ld	hl, -720866
	ld.sis	de, 1
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 2
	call	__sshru
	ld	c, e
	ld	b, d
	call	__sand
	ld	de, 0
	push	de
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 1
	call	__sshru
	ld.sis	bc, 1
	call	__sand
	ld	e, l
	ld	d, h
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	de, (ix + 6)
	push	de
	pop	iy
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	e, -1
	ld	d, 0
	ld	a, e
	jp	m, BB1_2
	ld	a, d
BB1_2:
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB1_4
	ld	e, d
BB1_4:
	or	a, e
	bit	0, a
	lea	hl, iy
	jr	nz, BB1_6
	push	bc
	pop	hl
BB1_6:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPlayer
_drawPlayer:
	call	__frameset0
	ld	hl, -96
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	or	a, a
	sbc	hl, hl
	ld	e, -64
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__fadd
	call	__ftol
	ld	hl, 5
	push	hl
	push	hl
	push	bc
	push	iy
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_getPlayerTilePos
_getPlayerTilePos:
	call	__frameset0
	ld	iy, (ix + 24)
	ld	hl, -8388608
	ld	e, 61
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__fmul
	call	__ftol
	ld	(iy), bc
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__fmul
	call	__ftol
	ld	(iy + 3), bc
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_playerTouchingColor
_playerTouchingColor:
	ld	hl, -17
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	e, -64
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	ld	(ix - 1), a
	call	__fadd
	call	__ftol
	ld	(ix - 8), bc
	ld	bc, (ix + 10)
	ld	(ix - 4), bc
	ld	a, (ix + 13)
	ld	(ix - 5), a
	call	__fadd
	call	__ftol
	ld	(ix - 14), bc
	push	bc
	ld	hl, (ix - 8)
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 16), a
	pop	hl
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fadd
	call	__ftol
	ld	(ix - 11), bc
	ld	hl, (ix - 14)
	push	hl
	push	bc
	call	_gfx_GetPixel
	ld	(ix - 15), a
	pop	hl
	pop	hl
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fadd
	call	__ftol
	ld	(ix - 14), bc
	push	bc
	ld	hl, (ix - 8)
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 17), a
	pop	hl
	pop	hl
	ld	hl, (ix - 14)
	push	hl
	ld	hl, (ix - 11)
	push	hl
	call	_gfx_GetPixel
	ld	iyl, 0
	ld	(ix - 11), a
	pop	hl
	pop	hl
	ld	hl, (ix - 4)
	ld	e, (ix - 5)
	ld	bc, 0
	ld	a, iyl
	call	__fcmp
	ld	d, 1
	ld	iyh, b
	ld	iyl, d
	jp	m, BB4_2
	ld	iyl, iyh
BB4_2:
	ld	hl, 7340032
	ld	e, 67
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	call	__fcmp
	jp	m, BB4_4
	ld	d, iyh
BB4_4:
	ld	hl, (ix + 6)
	ld	e, (ix - 1)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	p, BB4_6
	ld	iyh, -1
BB4_6:
	ld	a, iyl
	ld	l, -1
	rrc	a
	sbc	a, a
	ld	iyl, a
	ld	a, iyh
	or	a, iyl
	bit	0, a
	ld	c, l
	jr	nz, BB4_8
	ld	l, (ix - 16)
BB4_8:
	ld	(ix - 8), l
	ld	hl, -6291456
	rrc	d
	sbc	a, a
	ld	e, a
	ld	a, iyh
	or	a, e
	bit	0, a
	ld	d, c
	ld	iyh, d
	jr	nz, BB4_10
	push	af
	ld	a, (ix - 17)
	ld	iyh, a
	pop	af
BB4_10:
	ld	e, 67
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	call	__fcmp
	jp	m, BB4_12
	ld	a, 0
	jr	BB4_13
BB4_12:
	ld	a, -1
BB4_13:
	ld	b, (ix + 24)
	or	a, iyl
	bit	0, a
	ld	c, d
	jr	nz, BB4_15
	ld	c, (ix - 15)
BB4_15:
	ld	e, 1
	ld	a, (ix - 8)
	cp	a, b
	jp	z, BB4_27
	ld	a, c
	cp	a, b
	jp	z, BB4_27
	ld	a, iyh
	cp	a, b
	jp	z, BB4_27
	ld	e, 67
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	call	__fcmp
	ld	iyl, 1
	ld	l, 0
	ld	iyh, iyl
	jp	m, BB4_20
	ex	de, hl
	ld	iyl, e
	ex	de, hl
BB4_20:
	ld	hl, 7340032
	ld	e, 67
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	call	__fcmp
	ld	e, iyh
	jp	m, BB4_22
	ld	e, 0
BB4_22:
	ld	a, iyl
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	e
	sbc	a, a
	ld	e, a
	ld	a, l
	or	a, e
	bit	0, a
	push	af
	ld	a, (ix + 24)
	ld	iyh, a
	pop	af
	jr	nz, BB4_24
	ld	d, (ix - 11)
BB4_24:
	ld	a, d
	cp	a, iyh
	jr	z, BB4_26
	ld	e, 0
	jr	BB4_27
BB4_26:
	ld	e, -1
BB4_27:
	ld	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_playerMovement
_playerMovement:
	ld	hl, -15
	call	__frameset
	ld	iy, (ix + 6)
	ld	e, -65
	lea	hl, iy + 12
	ld	bc, (iy + 12)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, 2348810
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	iy, (ix + 6)
	ld	(iy + 12), hl
	ld	(iy + 15), e
	lea	bc, iy + 4
	ld	(ix - 6), bc
	ld	bc, (iy + 4)
	ld	(ix - 3), bc
	ld	iy, (ix - 6)
	lea	iy, iy + 3
	ld	bc, (ix - 3)
	ld	(ix - 3), iy
	ld	a, (iy)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	lea	hl, iy
	ld	iy, -21
	add	iy, sp
	ld	sp, iy
	ld	iy, 0
	add	iy, sp
	ld	bc, 17
	lea	de, iy
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	iy, (ix + 6)
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	ld	de, 0
	ld	hl, 0
	ld	(ix - 9), hl
	jp	z, BB5_11
	ld	bc, 17
	ld	(ix - 6), de
BB5_2:
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix + 6)
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	z, BB5_5
	ld	hl, (ix - 6)
	ld	de, 50
	or	a, a
	sbc	hl, de
	jr	nc, BB5_5
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 12)
	ld	(ix - 15), de
	ld	a, (iy + 15)
	ld	(ix - 12), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	e, (ix - 12)
	call	__fdiv
	ld	(ix - 12), bc
	ld	e, a
	ld	iy, (ix + 6)
	ld	bc, (iy + 4)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, (ix - 12)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, 17
	jp	BB5_2
BB5_5:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	a, b
	jr	z, BB5_10
	ld	de, (iy + 12)
	ld	(ix - 6), de
	ld	a, (iy + 15)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	e, (ix - 3)
	call	__fdiv
	push	bc
	pop	hl
	ld	e, a
	ld	bc, -8388608
	ld	a, -65
	call	__fcmp
	jr	z, BB5_8
	ld	bc, 0
	jr	BB5_9
BB5_8:
	ld	bc, 1
BB5_9:
	xor	a, a
	call	__ultof
	ld	hl, -3858760
	ld	e, 64
	call	__fmul
	ld	iy, (ix + 6)
BB5_10:
	ld	(iy + 12), bc
	ld	(iy + 15), a
	ld	de, 0
BB5_11:
	lea	bc, iy + 8
	ld	hl, (iy + 8)
	ld	(ix - 3), hl
	push	bc
	pop	iy
	lea	hl, iy + 3
	ld	(ix - 12), hl
	ld	a, (hl)
	ld	(ix - 6), a
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 4
	call	__sand
	push	de
	pop	iy
	lea	bc, iy
	ld	c, l
	ld	b, h
	xor	a, a
	call	__ultof
	ld	hl, 3019899
	ld	e, 63
	call	__fmul
	ld	hl, (ix - 3)
	ld	e, (ix - 6)
	call	__fadd
	ld	(ix - 3), bc
	ld	d, a
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 2
	call	__sand
	lea	bc, iy
	ld	c, l
	ld	b, h
	xor	a, a
	call	__ultof
	ld	hl, 3019899
	ld	e, -65
	call	__fmul
	lea	hl, iy
	ld	e, 64
	call	__fmul
	ld	hl, (ix - 3)
	ld	e, d
	call	__fadd
	ld	hl, 2348810
	ld	e, 63
	call	__fmul
	ld	(ix - 3), bc
	ld	e, a
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), e
	ld	bc, (iy)
	lea	hl, iy + 3
	ld	(ix - 6), hl
	ld	a, (hl)
	ld	hl, (ix - 3)
	call	__fadd
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	(ix - 3), de
	ld	bc, 17
	lea	hl, iy
	ldir
	ld	iy, (ix - 3)
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jp	z, BB5_17
BB5_12:
	ld	bc, 17
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix + 6)
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	z, BB5_15
	ld	hl, (ix - 9)
	ld	de, 20
	or	a, a
	sbc	hl, de
	jr	nc, BB5_15
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 8)
	ld	(ix - 15), de
	ld	a, (iy + 11)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	e, (ix - 3)
	call	__fdiv
	push	bc
	pop	iy
	ld	e, a
	ld	hl, (ix + 6)
	ld	bc, (hl)
	ld	hl, (ix - 6)
	ld	a, (hl)
	lea	hl, iy
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	jp	BB5_12
BB5_15:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jr	z, BB5_17
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, -3858760
	ld	(iy + 12), hl
	ld	(iy + 15), 64
	ld	de, (iy + 8)
	ld	(ix - 6), de
	ld	hl, (ix - 12)
	ld	a, (hl)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	e, (ix - 3)
	call	__fdiv
	ld	hl, -4194304
	ld	e, -64
	call	__fmul
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
BB5_17:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_resetPlayer
_resetPlayer:
	call	__frameset0
	ld	bc, (ix + 9)
	ld	de, -8388608
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	de
	pop	hl
	ld	e, -64
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	or	a, a
	sbc	hl, hl
	inc	e
	call	__fadd
	ld	hl, -8388608
	ld	e, -65
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	or	a, a
	sbc	hl, hl
	ld	(iy + 12), hl
	ld	(iy + 15), d
	ld	(iy + 16), 1
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_debugPlayerPosition
_debugPlayerPosition:
	call	__frameset0
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__ftol
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__ftol
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawTile
_drawTile:
	ld	hl, -3
	call	__frameset
	ld	bc, 4
	ld	hl, (ix + 9)
	call	__irems
	push	hl
	pop	iy
	ld	(ix + 9), iy
	ld	de, (ix + 6)
	dec	de
	ld	bc, 7
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	nc, BB8_51
	ld	(ix - 3), iy
	ld	hl, JTI8_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB8_2:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 16
BB8_3:
	push	hl
BB8_4:
	push	hl
	ld	hl, (ix + 15)
	jp	BB8_28
BB8_5:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB8_51
	ld	hl, JTI8_5
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB8_7:
	ld	hl, (ix + 15)
	ld	de, 8
	add	hl, de
	push	de
	ld	de, 16
	push	de
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	iy, (ix + 12)
	add	iy, de
	push	de
	push	de
	ld	hl, (ix + 15)
	jp	BB8_32
BB8_8:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB8_51
	ld	hl, JTI8_4
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB8_10:
	ld	hl, (ix + 15)
	ld	de, 8
	add	hl, de
	push	de
	ld	de, 16
	jp	BB8_27
BB8_11:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB8_51
	ld	hl, JTI8_2
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB8_13:
	ld	de, (ix + 12)
	push	de
	pop	iy
	ld	de, 16
	add	iy, de
	ld	bc, (ix + 15)
	push	bc
	pop	hl
	add	hl, de
	push	hl
	ld	de, (ix + 12)
	push	de
	push	hl
	push	iy
	push	bc
	jp	BB8_44
BB8_14:
	ld	hl, 4
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB8_51
	ld	hl, JTI8_1
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB8_16:
	ld	iy, (ix + 15)
	ld	de, 16
	add	iy, de
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	add	hl, de
	ex	de, hl
	push	bc
	pop	hl
	ld	bc, 8
	add	hl, bc
	ld	bc, (ix + 15)
	push	bc
	push	hl
	push	iy
	push	de
	push	iy
	jp	BB8_41
BB8_17:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB8_51
	ld	hl, JTI8_3
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB8_19:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	push	de
	jp	BB8_37
BB8_20:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 3)
	ld	bc, 1
	call	__iand
	bit	0, l
	jr	nz, BB8_22
	ld	hl, 8
	push	hl
	jr	BB8_31
BB8_22:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	push	de
	push	de
	ld	de, (ix + 15)
	push	de
	jr	BB8_25
BB8_23:
	ld	hl, 16
	push	hl
	ld	hl, 8
	jr	BB8_31
BB8_24:
	ld	hl, 8
	push	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
BB8_25:
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	hl, (ix + 15)
BB8_26:
	add	hl, de
	push	de
BB8_27:
	push	de
BB8_28:
	push	hl
	ld	hl, (ix + 12)
BB8_29:
	push	hl
	jr	BB8_33
BB8_30:
	ld	hl, 8
	push	hl
	ld	hl, 16
BB8_31:
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	iy, (ix + 12)
	add	iy, de
	ld	hl, (ix + 15)
	add	hl, de
	push	de
	push	de
BB8_32:
	push	hl
	push	iy
BB8_33:
	call	_gfx_FillRectangle
	jp	BB8_50
BB8_34:
	ld	hl, 16
	push	hl
	ld	hl, 8
	jp	BB8_4
BB8_35:
	ld	hl, 8
	push	hl
	ld	hl, 16
	jp	BB8_4
BB8_36:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	ld	bc, 16
	push	bc
BB8_37:
	push	de
	ld	de, (ix + 15)
	push	de
	jr	BB8_29
BB8_38:
	ld	de, (ix + 12)
	push	de
	pop	iy
	ld	hl, 16
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix + 15)
	push	bc
	pop	hl
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	push	hl
	push	iy
	jp	BB8_47
BB8_39:
	ld	de, (ix + 12)
	push	de
	pop	iy
	ld	hl, 16
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix + 15)
	push	bc
	pop	hl
	ld	de, 16
	add	hl, de
	push	hl
	ld	hl, (ix + 12)
	push	hl
	push	bc
	push	iy
	push	bc
	jr	BB8_42
BB8_40:
	ld	de, (ix + 12)
	ex	de, hl
	ld	de, 16
	add	hl, de
	ld	bc, (ix + 15)
	push	bc
	pop	iy
	add	iy, de
	push	iy
	push	hl
	push	bc
	push	hl
	push	bc
BB8_41:
	ld	hl, (ix + 12)
BB8_42:
	push	hl
	jr	BB8_49
BB8_43:
	ld	iy, (ix + 12)
	ld	hl, 16
	ex	de, hl
	add	iy, de
	ld	hl, (ix + 15)
	push	hl
	pop	bc
	add	hl, de
	ld	(ix - 3), hl
	push	bc
	pop	hl
	ld	de, 8
	add	hl, de
	push	hl
	ld	hl, (ix + 12)
	push	hl
	push	bc
	push	iy
	ld	hl, (ix - 3)
	push	hl
BB8_44:
	push	iy
	jr	BB8_49
BB8_45:
	ld	bc, (ix + 15)
	push	bc
	pop	iy
	ld	de, 16
	add	iy, de
	ld	de, (ix + 12)
	push	de
	pop	hl
	ld	bc, 8
	add	hl, bc
	ld	bc, (ix + 15)
	push	bc
	push	hl
	push	iy
	push	de
	push	bc
	jr	BB8_48
BB8_46:
	ld	bc, (ix + 15)
	push	bc
	pop	iy
	ld	hl, 16
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	de, (ix + 12)
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (ix + 15)
	ld	bc, 8
	add	hl, bc
	push	hl
	push	iy
	ld	hl, (ix - 3)
	push	hl
	push	de
BB8_47:
	ld	hl, (ix + 15)
	push	hl
BB8_48:
	push	de
BB8_49:
	call	_gfx_FillTriangle
	pop	hl
	pop	hl
BB8_50:
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB8_51:
	pop	hl
	pop	ix
	ret
BB8_52:
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	ld	hl, 8
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix + 15)
	ex	de, hl
	add	hl, bc
	push	bc
	push	bc
	jp	BB8_32
BB8_53:
	ld	hl, (ix + 15)
	ld	de, 8
	jp	BB8_26
BB8_54:
	ld	hl, 8
	jp	BB8_3
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI8_0
JTI8_0:
	dl	BB8_2
	dl	BB8_5
	dl	BB8_8
	dl	BB8_11
	dl	BB8_14
	dl	BB8_17
	dl	BB8_20
	private	JTI8_1
JTI8_1:
	dl	BB8_16
	dl	BB8_43
	dl	BB8_45
	dl	BB8_46
	private	JTI8_2
JTI8_2:
	dl	BB8_13
	dl	BB8_38
	dl	BB8_39
	dl	BB8_40
	private	JTI8_3
JTI8_3:
	dl	BB8_19
	dl	BB8_52
	dl	BB8_53
	dl	BB8_54
	private	JTI8_4
JTI8_4:
	dl	BB8_10
	dl	BB8_34
	dl	BB8_35
	dl	BB8_36
	private	JTI8_5
JTI8_5:
	dl	BB8_7
	dl	BB8_23
	dl	BB8_24
	dl	BB8_30

	section	.text,"ax",@progbits
	public	_generateMap
_generateMap:
	ld	hl, -52
	call	__frameset
	ld	bc, (ix + 15)
	ld	de, -500
	ld	hl, 500
	push	bc
	pop	iy
	add	iy, de
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, 500
	or	a, a
	sbc	hl, bc
	ex	de, hl
	call	pe, __setflag
	jp	m, BB9_2
	lea	hl, iy
BB9_2:
	ld	de, 170
	add	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix + 18)
	ld	bc, 6
	call	__imulu
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, -16
	add	hl, de
	ld	(ix - 27), hl
	ld	bc, 15
	ld	iy, 0
	lea	de, iy
BB9_3:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB9_36
	push	de
	pop	hl
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	ld	iy, 0
	sbc	hl, hl
	ld	(ix - 30), bc
	ld	a, l
	call	__ltof
	ld	(ix - 15), bc
	ld	bc, 15
	ld	l, a
	ld	(ix - 18), hl
	ld	a, e
	add	a, 8
	ld	l, a
	ld	(ix - 33), hl
	ld	l, e
	dec	l
	ld	(ix - 36), hl
	ld	(ix - 3), de
	ld	a, e
	add	a, 17
	ld	l, a
	ld	(ix - 39), hl
BB9_5:
	lea	hl, iy
	ld	de, 20
	or	a, a
	sbc	hl, de
	jp	z, BB9_35
	ld	hl, (ix - 3)
	ld	bc, 120
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	add	hl, bc
	ex	de, hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	(ix - 24), iy
	or	a, a
	sbc	hl, hl
	ld	(iy + 3), hl
	call	_rand
	ld	(ix - 21), hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_log
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	call	__ftol
	push	bc
	pop	hl
	ld	bc, 170
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 21)
	lea	bc, iy
	call	__irems
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB9_9
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	jr	nz, BB9_13
	ld	hl, (ix - 30)
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	jr	nz, BB9_13
BB9_9:
	call	_rand
	ld	bc, 100
	call	__irems
	inc	hl
	ld	de, (ix + 21)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB9_14
	call	_rand
	ld	bc, 7
	call	__irems
	push	hl
	pop	de
	inc	hl
	ld	iy, (ix - 24)
	ld	(iy), hl
	ld	hl, (_showTestTiles)
	push	de
	pop	bc
	push	de
	pop	iy
	ld	de, -3
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_16
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	jr	nc, BB9_16
	ld	hl, 1
	ld	iy, (ix - 24)
	ld	(iy), hl
	jr	BB9_14
BB9_13:
	ld	de, 0
	ld	hl, (ix - 24)
	ld	(hl), de
BB9_14:
	ld	bc, 15
BB9_15:
	ld	iy, (ix - 6)
	inc	iy
	jp	BB9_5
BB9_16:
	push	bc
	pop	de
	dec	de
	push	de
	pop	hl
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	ld	bc, 15
	jr	nc, BB9_15
	ld	hl, JTI9_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB9_18:
	call	_rand
	ld	bc, 4
	jp	BB9_33
BB9_19:
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, 17
	add	iy, de
	ld	(ix - 49), iy
	push	hl
	pop	iy
	ld	de, 8
	add	iy, de
	ld	(ix - 46), iy
	dec	hl
	ld	(ix - 52), hl
	ld	hl, 11
BB9_20:
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_31
	ld	(ix - 21), hl
	call	_rand
	ld	bc, 4
	call	__irems
	ld	(ix - 42), hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nc, BB9_29
	ld	hl, JTI9_1
	ld	de, (ix - 42)
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB9_23:
	ld	hl, (ix - 39)
	jr	BB9_26
BB9_24:
	ld	hl, (ix - 33)
	push	hl
	ld	hl, (ix - 52)
	jr	BB9_28
BB9_25:
	ld	hl, (ix - 36)
BB9_26:
	push	hl
	ld	hl, (ix - 46)
	jr	BB9_28
BB9_27:
	ld	hl, (ix - 33)
	push	hl
	ld	hl, (ix - 49)
BB9_28:
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 43), a
	pop	hl
	pop	hl
BB9_29:
	ld	a, (ix - 43)
	or	a, a
	ld	bc, 15
	ld	hl, (ix - 21)
	jr	nz, BB9_20
	xor	a, a
	ld	(ix - 43), a
BB9_31:
	ld	hl, (ix - 42)
	jr	BB9_34
BB9_32:
	call	_rand
	ld	bc, 2
BB9_33:
	call	__irems
	ld	bc, 15
BB9_34:
	ld	iy, (ix - 24)
	ld	(iy + 3), hl
	jp	BB9_15
BB9_35:
	ld	de, (ix - 3)
	inc	de
	ld	iy, 0
	jp	BB9_3
BB9_36:
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_38
	lea	bc, iy
	ld	de, 720
	ld	iy, (ix + 6)
	lea	hl, iy
	add	hl, de
	ld	(hl), bc
	ld	de, 726
	lea	hl, iy
	add	hl, de
	ld	(hl), bc
	ld	de, 840
	add	iy, de
	ld	hl, 1
	ld	(iy), hl
BB9_38:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI9_0
JTI9_0:
	dl	BB9_18
	dl	BB9_18
	dl	BB9_18
	dl	BB9_19
	dl	BB9_18
	dl	BB9_32
	private	JTI9_1
JTI9_1:
	dl	BB9_23
	dl	BB9_24
	dl	BB9_25
	dl	BB9_27

	section	.text,"ax",@progbits
	public	_loadRNGMap
_loadRNGMap:
	ld	hl, -24
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 6), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	(ix - 3), de
	ld	de, (ix + 15)
	ld	(ix - 9), de
	ld	de, (ix + 18)
	ld	(ix - 12), de
	ld	de, (ix + 21)
	ld	(ix - 15), de
	ld	de, (ix + 24)
	ld	(ix - 18), de
	ld	de, (ix + 27)
	ld	(ix - 21), de
	ld	de, (ix + 30)
	ld	(ix - 24), de
	push	hl
	call	_srand
	ld	bc, (ix - 3)
	pop	hl
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB10_3
	ld	bc, 0
	jr	BB10_3
BB10_2:
	ld	(ix - 3), bc
	call	_rand
	ld	bc, (ix - 3)
	dec	bc
BB10_3:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_2
	ld	hl, (ix - 6)
	ld	(ix + 6), hl
	ld	hl, (ix - 9)
	ld	(ix + 9), hl
	ld	hl, (ix - 12)
	ld	(ix + 12), hl
	ld	hl, (ix - 15)
	ld	(ix + 15), hl
	ld	hl, (ix - 18)
	ld	(ix + 18), hl
	ld	hl, (ix - 21)
	ld	(ix + 21), hl
	ld	hl, (ix - 24)
	ld	(ix + 24), hl
	ld	sp, ix
	pop	ix
	jp	_generateMap
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMap
_drawMap:
	ld	hl, -18
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	bc, 0
	ld	de, 18
BB11_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB11_6
	ld	(ix - 9), bc
	push	bc
	pop	hl
	ld	c, 4
	call	__ishl
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	ld	(ix - 6), bc
BB11_3:
	push	hl
	pop	iy
	ld	bc, 384
	or	a, a
	sbc	hl, bc
	jr	z, BB11_5
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	(ix - 15), de
	ld	hl, (ix - 6)
	ld	bc, 6
	ldir
	lea	hl, iy
	ld	(ix - 18), hl
	ld	iy, (ix - 15)
	ld	(iy + 6), hl
	ld	hl, (ix - 12)
	ld	(iy + 9), hl
	call	_drawTile
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	lea	iy, iy + 6
	ld	(ix - 6), iy
	ld	de, 16
	add	hl, de
	ld	de, 18
	jr	BB11_3
BB11_5:
	ld	bc, (ix - 9)
	inc	bc
	ld	iy, (ix - 3)
	lea	iy, iy + 120
	ld	(ix - 3), iy
	jp	BB11_1
BB11_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawSlider
_drawSlider:
	ld	hl, -11
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	(ix - 4), bc
	ld	a, (ix + 15)
	ld	(ix - 8), a
	ld	bc, (ix + 18)
	ld	(ix - 11), bc
	ld	bc, (ix + 21)
	ld	(ix - 7), bc
	ld	a, (ix + 24)
	ld	(ix - 1), a
	push	de
	push	hl
	call	_gfx_SetTextXY
	ld	de, (ix - 11)
	pop	hl
	pop	hl
	push	de
	pop	hl
	ld	bc, (ix - 4)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	c, -1
	ld	iyl, 0
	ld	a, c
	jp	m, BB12_2
	ld	a, iyl
BB12_2:
	and	a, (ix - 1)
	ld	b, a
	ex	de, hl
	ld	de, (ix - 7)
	or	a, a
	sbc	hl, de
	jr	z, BB12_4
	ld	c, iyl
BB12_4:
	ld	l, 32
	ld	a, c
	and	a, (ix - 1)
	ld	(ix - 11), a
	bit	0, a
	jp	nz, BB12_6
	jr	BB12_7
BB12_6:
	ld	l, 91
BB12_7:
	bit	0, b
	jr	z, BB12_9
	ld	l, 60
BB12_9:
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix - 8)
	push	hl
	ld	hl, (ix - 4)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, (ix - 4)
	ld	de, (ix - 7)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB12_11
	ld	a, 0
	jr	BB12_12
BB12_11:
	ld	a, -1
BB12_12:
	ld	l, 32
	and	a, (ix - 1)
	bit	0, (ix - 11)
	jr	z, BB12_14
	ld	l, 93
BB12_14:
	bit	0, a
	jr	z, BB12_16
	ld	l, 62
BB12_16:
	ld	(ix + 6), l
	ld	sp, ix
	pop	ix
	jp	_gfx_PrintChar
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handleMenuMode
_handleMenuMode:
	call	__frameset0
	ld	hl, (ix + 9)
	ld	de, _.str.2
	push	de
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_4
	ld	bc, _.str.3
	ld	iy, (ix + 9)
	ld	de, 2
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	jr	c, BB13_7
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	push	bc
	pop	hl
	jr	z, BB13_9
	ld	hl, (ix + 6)
	ld	(hl), 0
	jr	BB13_7
BB13_4:
	ld	hl, _.str.3
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_8
	ld	iy, (ix + 9)
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, _.str.2
	jr	nz, BB13_9
	ld	hl, 10
	ld	de, 118
	ld	bc, 1
	ld	(_spawnX), hl
	ld	(_spawnY), de
	ld	(_spawnBlock), bc
	or	a, a
	sbc	hl, hl
	ld	(_caveHeight), hl
	ld	de, 65
	ld	(_wsChance), de
	ld	de, 75
	ld	(_blockVariety), de
	ld	(_showTestTiles), hl
BB13_7:
	lea	hl, iy
	jr	BB13_9
BB13_8:
	ld	hl, (ix + 9)
BB13_9:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMenu
_drawMenu:
	ld	hl, -15
	call	__frameset
	ld	hl, (ix + 12)
	ld	iy, -720866
	ld	de, 0
	ld	(ix - 15), de
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	a, e
	bit	3, a
	jr	nz, BB14_2
	ex	de, hl
	ld.sis	bc, 1
	ld	l, (iy)
	ld	h, (iy + 1)
	call	__sand
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add	iy, de
	lea	hl, iy
	jr	BB14_3
BB14_2:
	dec	hl
BB14_3:
	ld	iy, (ix + 6)
	ld	de, (iy + 13)
	ld	bc, 0
	push	hl
	pop	iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB14_5
	push	de
	pop	iy
	dec	iy
BB14_5:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB14_7
	ld	iy, 0
BB14_7:
	ld	(ix - 3), iy
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 200
	push	hl
	ld	hl, 280
	push	hl
	ld	hl, 20
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 198
	push	hl
	ld	hl, 278
	push	hl
	ld	hl, 21
	push	hl
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB14_9
	ld	bc, _.str.4
	ld	de, 15
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	(iy + 1), bc
	ld	hl, 5
	ld	(iy + 4), hl
	push	de
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 7), hl
	ld	hl, _.str.5
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.6
	ld	(iy + 3), hl
	ld	hl, _.str.7
	ld	(iy + 6), hl
	ld	hl, _.str.8
	ld	(iy + 9), hl
	ld	hl, _.str.9
	ld	(iy + 12), hl
	ld	hl, 4
	ld	iy, (ix + 6)
	ld	(iy + 13), hl
	ld	(iy + 10), hl
	ld	hl, 12
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 16), hl
	ld	hl, _.str.10
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.11
	ld	(iy + 3), hl
	ld	hl, _.str.12
	ld	(iy + 6), hl
	ld	hl, _.str.13
	ld	(iy + 9), hl
	jp	BB14_25
BB14_9:
	ld	hl, _.str.3
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB14_25
	ld	hl, 7
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	de, _.str.12
	ld	(iy + 1), de
	ld	(iy + 4), hl
	ld	hl, 21
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 7), hl
	ld	hl, _.str.14
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.15
	ld	(iy + 3), hl
	ld	hl, _.str.16
	ld	(iy + 6), hl
	ld	hl, _.str.17
	ld	(iy + 9), hl
	ld	hl, _.str.18
	ld	(iy + 12), hl
	ld	hl, _.str.19
	ld	(iy + 15), hl
	ld	hl, _.str.20
	ld	(iy + 18), hl
	ld	hl, 9
	ld	iy, (ix + 6)
	ld	(iy + 13), hl
	ld	hl, 2
	ld	(iy + 10), hl
	ld	hl, 27
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 16), hl
	ld	hl, _.str.21
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.22
	ld	(iy + 3), hl
	ld	hl, _.str.23
	ld	(iy + 6), hl
	ld	hl, _.str.24
	ld	(iy + 9), hl
	ld	hl, _.str.25
	ld	(iy + 12), hl
	ld	hl, _.str.26
	ld	(iy + 15), hl
	ld	hl, _.str.27
	ld	(iy + 18), hl
	ld	hl, _.str.28
	ld	(iy + 21), hl
	ld	hl, _.str.29
	ld	(iy + 24), hl
	ld	hl, 8
	push	hl
	call	_gfx_SetMonospaceFont
	pop	hl
	ld	de, (_spawnX)
	ld	bc, 2
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	hl, -1
	ld	(ix - 6), hl
	jr	z, BB14_12
	ld	hl, 0
BB14_12:
	push	hl
	ld	hl, 320
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 3
	push	hl
	push	de
	ld	hl, 78
	push	hl
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintString
	pop	hl
	call	_gfx_GetTextX
	push	hl
	pop	iy
	ld	bc, (_spawnY)
	ld	de, 3
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	hl, -1
	jr	z, BB14_14
	ld	hl, 0
BB14_14:
	push	hl
	ld	hl, 240
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 3
	push	hl
	push	bc
	ld	hl, 78
	push	hl
	push	iy
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 10
	add	iy, de
	ld	de, (_spawnBlock)
	ld	bc, 4
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	hl, -1
	jr	z, BB14_16
	ld	hl, 0
BB14_16:
	push	hl
	ld	hl, 1
	push	hl
	pop	bc
	push	bc
	dec	hl
	push	hl
	push	bc
	push	de
	push	iy
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 10
	add	iy, de
	ld	de, (_caveHeight)
	ld	bc, 5
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	hl, -1
	jr	z, BB14_18
	ld	hl, 0
BB14_18:
	push	hl
	ld	hl, 999
	push	hl
	ld	hl, -99
	push	hl
	ld	hl, 3
	push	hl
	push	de
	push	iy
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 10
	add	iy, de
	ld	de, (_wsChance)
	ld	bc, 6
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	hl, -1
	jr	z, BB14_20
	ld	hl, 0
BB14_20:
	push	hl
	ld	hl, 100
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 3
	push	hl
	push	de
	push	iy
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 10
	add	iy, de
	ld	de, (_blockVariety)
	ld	bc, 7
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	hl, -1
	jr	z, BB14_22
	ld	hl, 0
BB14_22:
	push	hl
	ld	hl, 100
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 3
	push	hl
	push	de
	push	iy
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 10
	add	iy, de
	ld	de, (_showTestTiles)
	ld	bc, 8
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	z, BB14_24
	ld	hl, 0
	ld	(ix - 6), hl
BB14_24:
	ld	hl, (ix - 6)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	inc	hl
	push	hl
	push	de
	push	iy
	ld	hl, 160
	push	hl
	call	_drawSlider
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetMonospaceFont
	pop	hl
BB14_25:
	ld	hl, 68
	ld	(ix - 6), hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 1)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, 36
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 1)
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	bc, 0
	ld	(ix - 9), bc
BB14_26:
	ld	iy, (ix + 6)
	ld	de, (iy + 4)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB14_28
	ld	hl, (ix - 6)
	push	hl
	ld	hl, 28
	push	hl
	ld	(ix - 12), bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 7)
	ld	de, (ix - 9)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintString
	ld	bc, (ix - 12)
	pop	hl
	inc	bc
	ld	de, 10
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	de, 3
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	jr	BB14_26
BB14_28:
	call	_gfx_GetTextY
	push	hl
	pop	iy
	ld	de, 24
	add	iy, de
	ld	hl, (ix - 3)
	ld	bc, 10
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 9), iy
	add	iy, de
	ld	(ix - 12), iy
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), hl
	ld	bc, 3
BB14_29:
	ld	iy, (ix + 6)
	ld	de, (iy + 13)
	ld	hl, (ix - 6)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB14_35
	ld	de, (iy + 10)
	ld	hl, (ix - 6)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB14_35
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	jr	nz, BB14_33
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix + 6)
	ld	iy, (iy + 16)
	ld	hl, (ix - 3)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	de, 8
	push	de
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, 28
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	jr	BB14_34
BB14_33:
	push	bc
	call	_gfx_SetTextFGColor
BB14_34:
	pop	hl
	ld	hl, 28
	ld	de, (ix - 9)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 16)
	ld	de, (ix - 15)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, 10
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	bc, 3
	ld	hl, (ix - 15)
	add	hl, bc
	ld	(ix - 15), hl
	jp	BB14_29
BB14_35:
	ld	hl, (iy + 7)
	push	hl
	call	_free
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 16)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix - 3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -60
	call	__frameset
	lea	hl, ix - 3
	ld	(ix - 51), hl
	lea	hl, ix - 20
	ld	(ix - 42), hl
	call	_gfx_Begin
	ld.sis	hl, 28539
	ld	iy, -1900030
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, 32639
	ld	iy, -1900028
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, 32767
	ld	iy, -1900026
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, 31744
	ld	iy, -1900024
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, 3
	push	hl
	call	_gfx_SetTransparentColor
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, (-851900)
	ld	a, (-851897)
	push	hl
	call	_srand
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	ld	hl, _.str.31
	push	hl
	ld	hl, _.str.30
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	nz, BB15_3
	ld	hl, _.str.32
	push	hl
	ld	hl, _.str.30
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	z, BB15_5
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, (ix - 51)
	push	hl
	ld	(ix - 45), de
	call	_ti_Write
	jr	BB15_4
BB15_3:
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, (ix - 51)
	push	hl
	ld	(ix - 45), de
	call	_ti_Read
BB15_4:
	ld	de, (ix - 45)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	de
	call	_ti_Close
	pop	hl
BB15_5:
	ld	hl, _.str.2
	ld	(ix - 57), hl
	lea	hl, ix - 39
	ld	(ix - 60), hl
	ld	hl, (_spawnX)
	ld	(ix - 45), hl
	ld	hl, (_spawnY)
	ld	(ix - 48), hl
	ld	iy, (_caveHeight)
	ld	bc, (_wsChance)
	ld	de, (_blockVariety)
	ld	hl, (_spawnBlock)
	push	hl
	push	de
	push	bc
	push	iy
	ld	hl, (ix - 48)
	push	hl
	ld	hl, (ix - 45)
	push	hl
	ld	hl, _main.map
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, (_spawnX)
	ld	de, (_spawnY)
	push	de
	push	hl
	ld	hl, (ix - 42)
	push	hl
	call	_resetPlayer
	pop	hl
	pop	hl
	pop	hl
	ld	(ix - 39), 0
	ld	hl, 1
	ld	(ix - 48), hl
BB15_6:
	or	a, a
	sbc	hl, hl
	ld	(ix - 45), hl
BB15_7:
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jp	nz, BB15_37
	ld	hl, 1
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 32
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, _.str.33
	push	hl
	call	_gfx_PrintString
	pop	hl
	call	_gfx_GetTextX
	push	hl
	pop	de
	ld	(ix - 54), de
	ld	hl, 104
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 4
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix - 48)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 136
	push	hl
	ld	hl, (ix - 54)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _main.map
	push	hl
	call	_drawMap
	pop	hl
	bit	0, (ix - 4)
	jr	nz, BB15_11
BB15_9:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	l, (ix - 39)
	bit	6, a
	ld	bc, (ix - 42)
	jp	nz, BB15_17
	ld	(ix - 54), l
	jp	BB15_18
BB15_11:
	ld	hl, (ix - 42)
	push	hl
	call	_playerMovement
	pop	hl
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jp	nz, BB15_35
	ld	bc, (ix - 20)
	ld	hl, -6291456
	ld	e, 67
	ld	a, (ix - 17)
	call	__fcmp
	jp	m, BB15_36
	ld	bc, (ix - 16)
	ld	hl, 7340032
	ld	a, (ix - 13)
	call	__fcmp
	jp	m, BB15_16
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix - 42)
	ld	bc, 17
	ldir
	ld	(iy + 18), 4
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	nz, BB15_16
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	ld	hl, 0
	ld	(ix - 45), hl
	jp	z, BB15_9
BB15_16:
	ld	hl, (_spawnX)
	ld	de, (_spawnY)
	push	de
	push	hl
	ld	hl, (ix - 42)
	push	hl
	call	_resetPlayer
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 45), hl
	jp	BB15_9
BB15_17:
	ld	a, l
	xor	a, 1
	ld	(ix - 54), a
	ld	(ix - 39), a
	ld	(ix - 4), l
	or	a, a
	sbc	hl, hl
	ld	(ix - 45), hl
BB15_18:
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	push	bc
	pop	hl
	ld	bc, 17
	ldir
	call	_drawPlayer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	hl, (ix - 42)
	ld	bc, 17
	ldir
	call	_debugPlayerPosition
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix - 54)
	or	a, a
	jr	nz, BB15_20
	ld	(ix - 4), 1
	jp	BB15_28
BB15_20:
	ld	hl, (ix - 45)
	push	hl
	ld	hl, (ix - 57)
	push	hl
	ld	hl, (ix - 60)
	push	hl
	call	_drawMenu
	ld	(ix - 45), hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _.str.3
	push	hl
	ld	hl, (ix - 57)
	push	hl
	call	_strcmp
	ld	iy, (ix - 45)
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_25
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB15_25
	ld	de, -2
	add	iy, de
	lea	de, iy
	push	de
	pop	hl
	ld	bc, 7
	or	a, a
	sbc	hl, bc
	jr	nc, BB15_28
	ld	hl, JTI15_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB15_24:
	ld	hl, (_spawnX)
	ld	de, 320
	push	de
	ld	de, 0
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_spawnX), hl
	ld	hl, 2
	jr	BB15_27
BB15_25:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jr	z, BB15_28
	push	iy
	ld	hl, (ix - 57)
	push	hl
	ld	hl, (ix - 60)
	push	hl
	call	_handleMenuMode
	ld	(ix - 57), hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB15_27:
	ld	(ix - 45), hl
BB15_28:
	call	_gfx_SwapDraw
	ld	hl, 50
	push	hl
	call	_delay
	pop	hl
	jp	BB15_7
BB15_29:
	ld	hl, (_spawnY)
	ld	de, 240
	push	de
	ld	de, 0
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_spawnY), hl
	ld	hl, 3
	jr	BB15_27
BB15_30:
	ld	hl, (_spawnBlock)
	ld	de, 1
	push	de
	dec	de
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_spawnBlock), hl
	ld	hl, 4
	jr	BB15_27
BB15_31:
	ld	hl, (_caveHeight)
	ld	de, 999
	push	de
	ld	de, -99
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_caveHeight), hl
	ld	hl, 5
	jr	BB15_27
BB15_32:
	ld	hl, (_wsChance)
	ld	de, 100
	push	de
	ld	de, 0
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_wsChance), hl
	ld	hl, 6
	jp	BB15_27
BB15_33:
	ld	hl, (_blockVariety)
	ld	de, 100
	push	de
	ld	de, 0
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_blockVariety), hl
	ld	hl, 7
	jp	BB15_27
BB15_34:
	ld	hl, (_showTestTiles)
	ld	de, 0
	push	de
	push	de
	push	hl
	call	_adjustParam
	pop	de
	pop	de
	pop	de
	ld	(_showTestTiles), hl
	ld	hl, 8
	jp	BB15_27
BB15_35:
	ld	hl, (_spawnX)
	ld	(ix - 45), hl
	ld	hl, (_spawnY)
	ld	(ix - 54), hl
	ld	iy, (_caveHeight)
	ld	bc, (_wsChance)
	ld	de, (_blockVariety)
	ld	hl, (_spawnBlock)
	push	hl
	push	de
	push	bc
	push	iy
	ld	hl, (ix - 54)
	push	hl
	ld	hl, (ix - 45)
	push	hl
	ld	hl, _main.map
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, (_spawnX)
	ld	de, (_spawnY)
	push	de
	push	hl
	ld	hl, (ix - 42)
	push	hl
	call	_resetPlayer
	pop	hl
	pop	hl
	pop	hl
	jp	BB15_6
BB15_36:
	ld	hl, (_spawnX)
	ld	(ix - 45), hl
	ld	hl, (_spawnY)
	ld	(ix - 54), hl
	ld	iy, (_caveHeight)
	ld	bc, (_wsChance)
	ld	de, (_blockVariety)
	ld	hl, (_spawnBlock)
	push	hl
	push	de
	push	bc
	push	iy
	ld	hl, (ix - 54)
	push	hl
	ld	hl, (ix - 45)
	push	hl
	ld	hl, _main.map
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, (_spawnX)
	ld	de, (_spawnY)
	push	de
	push	hl
	ld	hl, (ix - 42)
	push	hl
	call	_resetPlayer
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 48)
	inc	hl
	ld	(ix - 48), hl
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	jp	BB15_6
BB15_37:
	ld	hl, _.str.32
	push	hl
	ld	hl, _.str.30
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	z, BB15_39
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, (ix - 51)
	push	hl
	ld	(ix - 42), de
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 42)
	push	hl
	call	_ti_Close
	pop	hl
BB15_39:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI15_0
JTI15_0:
	dl	BB15_24
	dl	BB15_29
	dl	BB15_30
	dl	BB15_31
	dl	BB15_32
	dl	BB15_33
	dl	BB15_34

	section	.data,"aw",@progbits
	public	_spawnX
_spawnX:
	dl	10

	section	.data,"aw",@progbits
	public	_spawnY
_spawnY:
	dl	118

	section	.data,"aw",@progbits
	public	_spawnBlock
_spawnBlock:
	dl	1

	section	.bss,"aw",@nobits
	public	_caveHeight
_caveHeight:
	rb	3

	section	.data,"aw",@progbits
	public	_wsChance
_wsChance:
	dl	65

	section	.data,"aw",@progbits
	public	_blockVariety
_blockVariety:
	dl	75

	section	.bss,"aw",@nobits
	public	_showTestTiles
_showTestTiles:
	rb	3

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"Player Pos: ", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	", ", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"START", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"MAP", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"RanGen CE", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"version: beta 0.4", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"author: ashbit06", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"A remake of a game I made on Scratch.", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"scratch.mit.edu/projects/579486353", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Save Level", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"Load Level", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"Map Generation", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"Resume", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"Edit the map generation parameters.", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"spawn coords:", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"spawn block:", 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	"cave height:", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"whitespace chance:", 0

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"block variety:", 0

	section	.rodata,"a",@progbits
	private	_.str.20
_.str.20:
	db	"show test tiles:", 0

	section	.rodata,"a",@progbits
	private	_.str.21
_.str.21:
	db	"Reset to defaults", 0

	section	.rodata,"a",@progbits
	private	_.str.22
_.str.22:
	db	"Back", 0

	section	.rodata,"a",@progbits
	private	_.str.23
_.str.23:
	db	"spawnX", 0

	section	.rodata,"a",@progbits
	private	_.str.24
_.str.24:
	db	"spawnY", 0

	section	.rodata,"a",@progbits
	private	_.str.25
_.str.25:
	db	"spawnBlock", 0

	section	.rodata,"a",@progbits
	private	_.str.26
_.str.26:
	db	"caveHeight", 0

	section	.rodata,"a",@progbits
	private	_.str.27
_.str.27:
	db	"wsChance", 0

	section	.rodata,"a",@progbits
	private	_.str.28
_.str.28:
	db	"blockVariety", 0

	section	.rodata,"a",@progbits
	private	_.str.29
_.str.29:
	db	"showTestTiles", 0

	section	.bss,"aw",@nobits
	private	_main.map
_main.map:
	rb	1800

	section	.rodata,"a",@progbits
	private	_.str.30
_.str.30:
	db	"RanGen", 0

	section	.rodata,"a",@progbits
	private	_.str.31
_.str.31:
	db	"r", 0

	section	.rodata,"a",@progbits
	private	_.str.32
_.str.32:
	db	"w", 0

	section	.rodata,"a",@progbits
	private	_.str.33
_.str.33:
	db	"LEVEL", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	extern	_fabsf
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_srand
	extern	_malloc
	extern	_log
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__fadd
	extern	_rand
	extern	_gfx_SetMonospaceFont
	extern	_ti_Close
	extern	__sand
	extern	_gfx_PrintString
	extern	__ishl
	extern	__sshru
	extern	__ftol
	extern	_gfx_PrintInt
	extern	_gfx_FillTriangle
	extern	__setflag
	extern	_ti_Read
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_ti_Open
	extern	__ltof
	extern	_delay
	extern	__fsub
	extern	_free
	extern	__frameset
	extern	_gfx_GetPixel
	extern	_ti_Write
	extern	_gfx_GetStringWidth
	extern	_gfx_SetTransparentColor
	extern	_strcmp
	extern	_kb_Scan
	extern	__ultof
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	__fmul
	extern	_gfx_SetDraw
	extern	_gfx_GetTextX
	extern	_gfx_GetTextY
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_FillScreen
	extern	__irems
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	_gfx_End
	extern	__fcmp
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
