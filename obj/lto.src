	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_any
_any:
	call	__frameset0
	ld	iy, (ix + 9)
	ld	de, 0
	ld	bc, 1
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	lea	bc, iy
	jp	p, BB0_2
	push	de
	pop	bc
BB0_2:
	ld	iy, (ix + 6)
BB0_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB0_6
	lea	hl, iy
	add	hl, de
	inc	de
	bit	0, (hl)
	jr	z, BB0_3
	dec	de
	jr	BB0_7
BB0_6:
	push	bc
	pop	de
BB0_7:
	ex	de, hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB0_9
	ld	a, 0
	jr	BB0_10
BB0_9:
	ld	a, -1
BB0_10:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPlayer
_drawPlayer:
	call	__frameset0
	ld	hl, -96
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	or	a, a
	sbc	hl, hl
	ld	e, -64
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__fadd
	call	__ftol
	ld	hl, 5
	push	hl
	push	hl
	push	bc
	push	iy
	call	_gfx_FillRectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_getPlayerTilePos
_getPlayerTilePos:
	call	__frameset0
	ld	iy, (ix + 24)
	ld	hl, -8388608
	ld	e, 61
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__fmul
	call	__ftol
	ld	(iy), bc
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__fmul
	call	__ftol
	ld	(iy + 3), bc
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_playerTouchingColor
_playerTouchingColor:
	ld	hl, -17
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	e, -64
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	ld	(ix - 1), a
	call	__fadd
	call	__ftol
	ld	(ix - 8), bc
	ld	bc, (ix + 10)
	ld	(ix - 4), bc
	ld	a, (ix + 13)
	ld	(ix - 5), a
	call	__fadd
	call	__ftol
	ld	(ix - 14), bc
	push	bc
	ld	hl, (ix - 8)
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 16), a
	pop	hl
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fadd
	call	__ftol
	ld	(ix - 11), bc
	ld	hl, (ix - 14)
	push	hl
	push	bc
	call	_gfx_GetPixel
	ld	(ix - 15), a
	pop	hl
	pop	hl
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fadd
	call	__ftol
	ld	(ix - 14), bc
	push	bc
	ld	hl, (ix - 8)
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 17), a
	pop	hl
	pop	hl
	ld	hl, (ix - 14)
	push	hl
	ld	hl, (ix - 11)
	push	hl
	call	_gfx_GetPixel
	ld	iyl, 0
	ld	(ix - 11), a
	pop	hl
	pop	hl
	ld	hl, (ix - 4)
	ld	e, (ix - 5)
	ld	bc, 0
	ld	a, iyl
	call	__fcmp
	ld	d, 1
	ld	iyh, b
	ld	iyl, d
	jp	m, BB3_2
	ld	iyl, iyh
BB3_2:
	ld	hl, 7340032
	ld	e, 67
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	call	__fcmp
	jp	m, BB3_4
	ld	d, iyh
BB3_4:
	ld	hl, (ix + 6)
	ld	e, (ix - 1)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jp	p, BB3_6
	ld	iyh, -1
BB3_6:
	ld	a, iyl
	ld	l, -1
	rrc	a
	sbc	a, a
	ld	iyl, a
	ld	a, iyh
	or	a, iyl
	bit	0, a
	ld	c, l
	jr	nz, BB3_8
	ld	l, (ix - 16)
BB3_8:
	ld	(ix - 8), l
	ld	hl, -6291456
	rrc	d
	sbc	a, a
	ld	e, a
	ld	a, iyh
	or	a, e
	bit	0, a
	ld	d, c
	ld	iyh, d
	jr	nz, BB3_10
	push	af
	ld	a, (ix - 17)
	ld	iyh, a
	pop	af
BB3_10:
	ld	e, 67
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	call	__fcmp
	jp	m, BB3_12
	ld	a, 0
	jr	BB3_13
BB3_12:
	ld	a, -1
BB3_13:
	ld	b, (ix + 24)
	or	a, iyl
	bit	0, a
	ld	c, d
	jr	nz, BB3_15
	ld	c, (ix - 15)
BB3_15:
	ld	e, 1
	ld	a, (ix - 8)
	cp	a, b
	jp	z, BB3_27
	ld	a, c
	cp	a, b
	jp	z, BB3_27
	ld	a, iyh
	cp	a, b
	jp	z, BB3_27
	ld	e, 67
	ld	bc, (ix + 6)
	ld	a, (ix - 1)
	call	__fcmp
	ld	iyl, 1
	ld	l, 0
	ld	iyh, iyl
	jp	m, BB3_20
	ex	de, hl
	ld	iyl, e
	ex	de, hl
BB3_20:
	ld	hl, 7340032
	ld	e, 67
	ld	bc, (ix - 4)
	ld	a, (ix - 5)
	call	__fcmp
	ld	e, iyh
	jp	m, BB3_22
	ld	e, 0
BB3_22:
	ld	a, iyl
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	e
	sbc	a, a
	ld	e, a
	ld	a, l
	or	a, e
	bit	0, a
	push	af
	ld	a, (ix + 24)
	ld	iyh, a
	pop	af
	jr	nz, BB3_24
	ld	d, (ix - 11)
BB3_24:
	ld	a, d
	cp	a, iyh
	jr	z, BB3_26
	ld	e, 0
	jr	BB3_27
BB3_26:
	ld	e, -1
BB3_27:
	ld	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_playerMovement
_playerMovement:
	ld	hl, -15
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 2348810
	or	a, a
	sbc	hl, hl
	ld	(ix - 9), hl
	lea	hl, iy + 12
	ld	bc, (iy + 12)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ex	de, hl
	ld	e, -65
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	iy, (ix + 6)
	ld	(iy + 12), hl
	ld	(iy + 15), e
	lea	bc, iy + 4
	ld	(ix - 6), bc
	ld	bc, (iy + 4)
	ld	(ix - 3), bc
	ld	iy, (ix - 6)
	lea	iy, iy + 3
	ld	bc, (ix - 3)
	ld	(ix - 3), iy
	ld	a, (iy)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	lea	hl, iy
	ld	iy, -21
	add	iy, sp
	ld	sp, iy
	ld	iy, 0
	add	iy, sp
	ld	bc, 17
	lea	de, iy
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	iy, (ix + 6)
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jp	z, BB4_11
	ld	bc, 17
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), hl
BB4_2:
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix + 6)
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	z, BB4_5
	ld	hl, (ix - 6)
	ld	de, 50
	or	a, a
	sbc	hl, de
	jr	nc, BB4_5
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 12)
	ld	(ix - 15), de
	ld	a, (iy + 15)
	ld	(ix - 12), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	e, (ix - 12)
	call	__fdiv
	ld	(ix - 12), bc
	ld	e, a
	ld	iy, (ix + 6)
	ld	bc, (iy + 4)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, (ix - 12)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, 17
	jp	BB4_2
BB4_5:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	a, b
	jr	z, BB4_10
	ld	de, (iy + 12)
	ld	(ix - 6), de
	ld	a, (iy + 15)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	e, (ix - 3)
	call	__fdiv
	push	bc
	pop	hl
	ld	e, a
	ld	bc, -8388608
	ld	a, -65
	call	__fcmp
	jr	z, BB4_8
	ld	bc, 0
	jr	BB4_9
BB4_8:
	ld	bc, 1
BB4_9:
	xor	a, a
	call	__ultof
	ld	hl, -3858760
	ld	e, 64
	call	__fmul
	ld	iy, (ix + 6)
BB4_10:
	ld	(iy + 12), bc
	ld	(iy + 15), a
BB4_11:
	lea	de, iy + 8
	ld	hl, (iy + 8)
	ld	(ix - 3), hl
	push	de
	pop	iy
	lea	hl, iy + 3
	ld	(ix - 6), hl
	ld	d, (hl)
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 4
	call	__sand
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	xor	a, a
	lea	bc, iy
	call	__ultof
	ld	hl, 3019899
	ld	e, 63
	call	__fmul
	ld	hl, (ix - 3)
	ld	e, d
	call	__fadd
	ld	(ix - 3), bc
	ld	d, a
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 2
	call	__sand
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	lea	bc, iy
	xor	a, a
	call	__ultof
	ld	hl, 3019899
	ld	e, -65
	call	__fmul
	ld	hl, (ix - 3)
	ld	e, d
	call	__fadd
	ld	hl, 2348810
	ld	e, 63
	call	__fmul
	ld	(ix - 3), bc
	ld	e, a
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), e
	ld	bc, (iy)
	lea	hl, iy + 3
	ld	(ix - 12), hl
	ld	a, (hl)
	ld	hl, (ix - 3)
	call	__fadd
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	(ix - 3), de
	ld	bc, 17
	lea	hl, iy
	ldir
	ld	iy, (ix - 3)
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jp	z, BB4_17
BB4_12:
	ld	bc, 17
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix + 6)
	ldir
	ld	(iy + 18), 0
	call	_playerTouchingColor
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	z, BB4_15
	ld	hl, (ix - 9)
	ld	de, 20
	or	a, a
	sbc	hl, de
	jr	nc, BB4_15
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 8)
	ld	(ix - 15), de
	ld	a, (iy + 11)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	e, (ix - 3)
	call	__fdiv
	push	bc
	pop	iy
	ld	e, a
	ld	hl, (ix + 6)
	ld	bc, (hl)
	ld	hl, (ix - 12)
	ld	a, (hl)
	lea	hl, iy
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	jp	BB4_12
BB4_15:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jr	z, BB4_17
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, -3858760
	ld	(iy + 12), hl
	ld	(iy + 15), 64
	ld	de, (iy + 8)
	ld	(ix - 9), de
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	(ix - 3), a
	ld	l, a
	push	hl
	push	de
	call	_fabsf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix - 9)
	ld	e, (ix - 3)
	call	__fdiv
	ld	hl, -4194304
	ld	e, -64
	call	__fmul
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
BB4_17:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_resetPlayer
_resetPlayer:
	call	__frameset0
	ld	bc, (ix + 9)
	ld	de, -8388608
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	de
	pop	hl
	ld	e, -64
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	or	a, a
	sbc	hl, hl
	inc	e
	call	__fadd
	ld	hl, -8388608
	ld	e, -65
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	or	a, a
	sbc	hl, hl
	ld	(iy + 12), hl
	ld	(iy + 15), d
	ld	(iy + 16), 1
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_debugPlayerPosition
_debugPlayerPosition:
	call	__frameset0
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__ftol
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	call	__ftol
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawTile
_drawTile:
	ld	hl, -3
	call	__frameset
	ld	bc, 4
	ld	hl, (ix + 9)
	call	__irems
	push	hl
	pop	iy
	ld	(ix + 9), iy
	ld	de, (ix + 6)
	dec	de
	ld	bc, 7
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	nc, BB7_28
	ld	(ix - 3), iy
	ld	hl, JTI7_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB7_2:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 16
BB7_3:
	push	hl
BB7_4:
	push	hl
	ld	hl, (ix + 15)
	jp	BB7_22
BB7_5:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB7_28
	ld	hl, JTI7_3
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB7_7:
	ld	hl, (ix + 15)
	ld	de, 8
	add	hl, de
	push	de
	ld	de, 16
	push	de
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	iy, (ix + 12)
	add	iy, de
	push	de
	push	de
	ld	hl, (ix + 15)
	jp	BB7_26
BB7_8:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB7_28
	ld	hl, JTI7_2
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB7_10:
	ld	hl, (ix + 15)
	ld	de, 8
	add	hl, de
	push	de
	ld	de, 16
	jp	BB7_21
BB7_11:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 4
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	nc, BB7_28
	ld	hl, JTI7_1
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB7_13:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	push	de
	jp	BB7_32
BB7_14:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 3)
	ld	bc, 1
	call	__iand
	bit	0, l
	jr	nz, BB7_16
	ld	hl, 8
	push	hl
	jr	BB7_25
BB7_16:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	push	de
	push	de
	ld	de, (ix + 15)
	push	de
	jr	BB7_19
BB7_17:
	ld	hl, 16
	push	hl
	ld	hl, 8
	jr	BB7_25
BB7_18:
	ld	hl, 8
	push	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
BB7_19:
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	hl, (ix + 15)
BB7_20:
	add	hl, de
	push	de
BB7_21:
	push	de
BB7_22:
	push	hl
	ld	hl, (ix + 12)
BB7_23:
	push	hl
	jr	BB7_27
BB7_24:
	ld	hl, 8
	push	hl
	ld	hl, 16
BB7_25:
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 8
	ld	iy, (ix + 12)
	add	iy, de
	ld	hl, (ix + 15)
	add	hl, de
	push	de
	push	de
BB7_26:
	push	hl
	push	iy
BB7_27:
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB7_28:
	pop	hl
	pop	ix
	ret
BB7_29:
	ld	hl, 16
	push	hl
	ld	hl, 8
	jp	BB7_4
BB7_30:
	ld	hl, 8
	push	hl
	ld	hl, 16
	jp	BB7_4
BB7_31:
	ld	hl, (ix + 12)
	ld	de, 8
	add	hl, de
	ld	bc, 16
	push	bc
BB7_32:
	push	de
	ld	de, (ix + 15)
	push	de
	jr	BB7_23
BB7_33:
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	ld	hl, 8
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix + 15)
	ex	de, hl
	add	hl, bc
	push	bc
	push	bc
	jr	BB7_26
BB7_34:
	ld	hl, (ix + 15)
	ld	de, 8
	jp	BB7_20
BB7_35:
	ld	hl, 8
	jp	BB7_3
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI7_0
JTI7_0:
	dl	BB7_2
	dl	BB7_5
	dl	BB7_8
	dl	BB7_2
	dl	BB7_2
	dl	BB7_11
	dl	BB7_14
	private	JTI7_1
JTI7_1:
	dl	BB7_13
	dl	BB7_33
	dl	BB7_34
	dl	BB7_35
	private	JTI7_2
JTI7_2:
	dl	BB7_10
	dl	BB7_29
	dl	BB7_30
	dl	BB7_31
	private	JTI7_3
JTI7_3:
	dl	BB7_7
	dl	BB7_17
	dl	BB7_18
	dl	BB7_24

	section	.text,"ax",@progbits
	public	_generateMap
_generateMap:
	ld	hl, -52
	call	__frameset
	ld	bc, (ix + 15)
	ld	de, -500
	ld	hl, 500
	push	bc
	pop	iy
	add	iy, de
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, 500
	or	a, a
	sbc	hl, bc
	ex	de, hl
	call	pe, __setflag
	jp	m, BB8_2
	lea	hl, iy
BB8_2:
	ld	de, 170
	add	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix + 18)
	ld	bc, 6
	call	__imulu
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, -16
	add	hl, de
	ld	(ix - 27), hl
	ld	bc, 15
	ld	de, 0
BB8_3:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB8_32
	push	de
	pop	hl
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix - 30), bc
	ld	a, l
	call	__ltof
	ld	(ix - 15), bc
	ld	bc, 15
	ld	l, a
	ld	(ix - 18), hl
	ld	a, e
	add	a, 8
	ld	l, a
	ld	(ix - 33), hl
	ld	l, e
	dec	l
	ld	(ix - 36), hl
	ld	(ix - 3), de
	ld	a, e
	add	a, 17
	ld	l, a
	ld	(ix - 39), hl
	ld	iy, 0
BB8_5:
	lea	hl, iy
	ld	de, 20
	or	a, a
	sbc	hl, de
	jp	z, BB8_31
	ld	hl, (ix - 3)
	ld	bc, 120
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	add	hl, bc
	ex	de, hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	(ix - 24), iy
	or	a, a
	sbc	hl, hl
	ld	(iy + 3), hl
	call	_rand
	ld	(ix - 21), hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_log
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	call	__ftol
	push	bc
	pop	hl
	ld	bc, 170
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 21)
	lea	bc, iy
	call	__irems
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB8_9
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	jr	nz, BB8_13
	ld	hl, (ix - 30)
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	jr	nz, BB8_13
BB8_9:
	call	_rand
	ld	bc, 100
	call	__irems
	inc	hl
	ld	de, (ix + 21)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB8_29
	call	_rand
	ld	bc, 7
	call	__irems
	push	hl
	pop	de
	inc	hl
	ld	iy, (ix - 24)
	ld	(iy), hl
	dec	de
	push	de
	pop	hl
	dec	bc
	or	a, a
	sbc	hl, bc
	jp	nc, BB8_29
	ld	hl, JTI8_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB8_12:
	call	_rand
	ld	bc, 4
	jp	BB8_28
BB8_13:
	ld	de, 0
	ld	hl, (ix - 24)
	ld	(hl), de
	jp	BB8_29
BB8_14:
	ld	bc, (ix - 6)
	push	bc
	pop	hl
	ld	de, 17
	add	hl, de
	ld	(ix - 49), hl
	push	bc
	pop	hl
	ld	de, 8
	add	hl, de
	ld	(ix - 46), hl
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 52), hl
	ld	hl, 11
	ld	bc, 15
BB8_15:
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB8_26
	ld	(ix - 21), hl
	call	_rand
	ld	bc, 4
	call	__irems
	ld	(ix - 42), hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nc, BB8_24
	ld	hl, JTI8_1
	ld	de, (ix - 42)
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB8_18:
	ld	hl, (ix - 39)
	jr	BB8_21
BB8_19:
	ld	hl, (ix - 33)
	push	hl
	ld	hl, (ix - 52)
	jr	BB8_23
BB8_20:
	ld	hl, (ix - 36)
BB8_21:
	push	hl
	ld	hl, (ix - 46)
	jr	BB8_23
BB8_22:
	ld	hl, (ix - 33)
	push	hl
	ld	hl, (ix - 49)
BB8_23:
	push	hl
	call	_gfx_GetPixel
	ld	(ix - 43), a
	pop	hl
	pop	hl
BB8_24:
	ld	a, (ix - 43)
	or	a, a
	ld	bc, 15
	ld	hl, (ix - 21)
	jr	nz, BB8_15
	xor	a, a
	ld	(ix - 43), a
BB8_26:
	ld	hl, (ix - 42)
	ld	iy, (ix - 24)
	ld	(iy + 3), hl
	jr	BB8_30
BB8_27:
	call	_rand
	ld	bc, 2
BB8_28:
	call	__irems
	ld	iy, (ix - 24)
	ld	(iy + 3), hl
BB8_29:
	ld	bc, 15
BB8_30:
	ld	iy, (ix - 6)
	inc	iy
	jp	BB8_5
BB8_31:
	ld	de, (ix - 3)
	inc	de
	jp	BB8_3
BB8_32:
	bit	0, (ix + 24)
	jr	z, BB8_34
	ld	bc, 0
	ld	de, 720
	ld	iy, (ix + 6)
	lea	hl, iy
	add	hl, de
	ld	(hl), bc
	ld	de, 726
	lea	hl, iy
	add	hl, de
	ld	(hl), bc
	ld	de, 840
	add	iy, de
	ld	hl, 1
	ld	(iy), hl
BB8_34:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI8_0
JTI8_0:
	dl	BB8_12
	dl	BB8_12
	dl	BB8_12
	dl	BB8_14
	dl	BB8_12
	dl	BB8_27
	private	JTI8_1
JTI8_1:
	dl	BB8_18
	dl	BB8_19
	dl	BB8_20
	dl	BB8_22

	section	.text,"ax",@progbits
	public	_loadMap
_loadMap:
	ld	hl, -22
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 6), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	(ix - 3), de
	ld	de, (ix + 15)
	ld	(ix - 9), de
	ld	de, (ix + 18)
	ld	(ix - 12), de
	ld	de, (ix + 21)
	ld	(ix - 15), de
	ld	de, (ix + 24)
	ld	(ix - 18), de
	ld	de, (ix + 27)
	ld	(ix - 21), de
	ld	a, (ix + 30)
	ld	(ix - 22), a
	push	hl
	call	_srand
	ld	bc, (ix - 3)
	pop	hl
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB9_3
	ld	bc, 0
	jr	BB9_3
BB9_2:
	ld	(ix - 3), bc
	call	_rand
	ld	bc, (ix - 3)
	dec	bc
BB9_3:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_2
	ld	hl, (ix - 6)
	ld	(ix + 6), hl
	ld	hl, (ix - 9)
	ld	(ix + 9), hl
	ld	hl, (ix - 12)
	ld	(ix + 12), hl
	ld	hl, (ix - 15)
	ld	(ix + 15), hl
	ld	hl, (ix - 18)
	ld	(ix + 18), hl
	ld	hl, (ix - 21)
	ld	(ix + 21), hl
	ld	a, (ix - 22)
	ld	(ix + 24), a
	ld	sp, ix
	pop	ix
	jp	_generateMap
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMap
_drawMap:
	ld	hl, -18
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	bc, 0
	ld	de, 18
BB10_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB10_6
	ld	(ix - 9), bc
	push	bc
	pop	hl
	ld	c, 4
	call	__ishl
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	ld	(ix - 6), bc
BB10_3:
	push	hl
	pop	iy
	ld	bc, 384
	or	a, a
	sbc	hl, bc
	jr	z, BB10_5
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	(ix - 15), de
	ld	hl, (ix - 6)
	ld	bc, 6
	ldir
	lea	hl, iy
	ld	(ix - 18), hl
	ld	iy, (ix - 15)
	ld	(iy + 6), hl
	ld	hl, (ix - 12)
	ld	(iy + 9), hl
	call	_drawTile
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	lea	iy, iy + 6
	ld	(ix - 6), iy
	ld	de, 16
	add	hl, de
	ld	de, 18
	jr	BB10_3
BB10_5:
	ld	bc, (ix - 9)
	inc	bc
	ld	iy, (ix - 3)
	lea	iy, iy + 120
	ld	(ix - 3), iy
	jp	BB10_1
BB10_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handleMenuMode
_handleMenuMode:
	call	__frameset0
	ld	de, (ix + 9)
	ld	hl, _.str.2
	push	hl
	push	de
	call	_strcmp
	push	hl
	pop	de
	pop	hl
	pop	hl
	ld	bc, 3
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_3
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_3
	ld	hl, (ix + 6)
	ld	(hl), 0
BB11_3:
	ld	hl, (ix + 9)
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawMenu
_drawMenu:
	ld	hl, -18
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	ld	(ix - 12), hl
	ld	de, (ix + 12)
	ld	hl, -720868
	ld.sis	bc, 1
	ld	iy, 0
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	bit	0, l
	jr	z, BB12_2
	lea	de, iy
BB12_2:
	ld	(ix - 6), de
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 12
	call	__sshl
	ld	(ix - 9), iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add.sis	iy, iy
	sbc.sis	hl, hl
	ld	c, l
	ld	b, h
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	d, a
	ld	e, c
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	de, 0
	ld	e, l
	ld	d, h
	add	iy, de
	ld	de, 1
	lea	bc, iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_4
	ld	bc, 0
BB12_4:
	ld	iy, (ix - 3)
	ld	de, (iy + 10)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB12_6
	dec	de
	push	de
	pop	bc
BB12_6:
	ld	(ix - 6), bc
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 200
	push	hl
	ld	hl, 280
	push	hl
	ld	hl, 20
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 198
	push	hl
	ld	hl, 278
	push	hl
	ld	hl, 21
	push	hl
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB12_8
	ld	de, _.str.3
	ld	hl, 6
	ld	iy, (ix - 3)
	ld	(iy + 1), de
	ld	de, 2
	ld	(iy + 4), de
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix - 3)
	ld	(iy + 7), hl
	ld	hl, _.str.4
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.5
	ld	(iy + 3), hl
	ld	hl, _.str.6
	ld	(iy + 6), hl
	ld	hl, _.str.7
	ld	(iy + 9), hl
	ld	hl, _.str.8
	ld	(iy + 12), hl
	ld	iy, (ix - 3)
	ld	hl, 4
	ld	(iy + 10), hl
	ld	hl, 12
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	ld	iy, (ix - 3)
	ld	(iy + 13), hl
	ld	hl, _.str.9
	push	de
	pop	iy
	ld	(iy), hl
	ld	hl, _.str.10
	ld	(iy + 3), hl
	ld	hl, _.str.11
	ld	(iy + 6), hl
	ld	hl, _.str.12
	ld	(iy + 9), hl
	jr	BB12_9
BB12_8:
	ld	hl, _.str.6
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 2
	push	hl
	push	hl
	call	z, _gfx_SetTextScale
	pop	hl
	pop	hl
BB12_9:
	ld	iy, (ix - 3)
	ld	hl, 68
	ld	(ix - 12), hl
	ld	hl, (iy + 1)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, 36
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix - 3)
	ld	hl, (iy + 1)
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	bc, 0
	ld	(ix - 15), bc
BB12_10:
	ld	iy, (ix - 3)
	ld	de, (iy + 4)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_12
	ld	hl, (ix - 12)
	push	hl
	ld	hl, 28
	push	hl
	ld	(ix - 18), bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix - 3)
	ld	hl, (iy + 7)
	ld	de, (ix - 15)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintString
	ld	bc, (ix - 18)
	pop	hl
	inc	bc
	ld	de, 10
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	de, 3
	ld	hl, (ix - 15)
	add	hl, de
	ld	(ix - 15), hl
	jr	BB12_10
BB12_12:
	call	_gfx_GetTextX
	push	hl
	pop	iy
	ld	de, 24
	add	iy, de
	ld	hl, (ix - 6)
	ld	bc, 10
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 12), iy
	add	iy, de
	ld	(ix - 18), iy
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB12_13:
	ld	iy, (ix - 3)
	ld	de, (iy + 10)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_18
	ld	de, (ix - 6)
	ex	de, hl
	ld	(ix - 15), bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB12_16
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix - 3)
	ld	iy, (iy + 13)
	ld	hl, (ix - 6)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	de, 8
	push	de
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, 28
	push	hl
	call	_gfx_FillRectangle
	ld	de, 28
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jr	BB12_17
BB12_16:
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 28
	ex	de, hl
BB12_17:
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	iy, (ix - 3)
	ld	hl, (iy + 13)
	ld	de, (ix - 9)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix - 15)
	inc	bc
	ld	de, 10
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	de, 3
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	jp	BB12_13
BB12_18:
	ld	hl, (iy + 7)
	push	hl
	call	_free
	pop	hl
	ld	iy, (ix - 3)
	ld	hl, (iy + 13)
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	_free
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -1866
	call	__frameset
	ld	bc, -1842
	lea	iy, ix
	add	iy, bc
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy + 36
	push	ix
	ld	bc, -1848
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 33
	ld	bc, -1857
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_gfx_Begin
	ld.sis	hl, 28539
	ld	iy, -1900030
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, -33
	ld	iy, -1900028
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, (-851900)
	ld	a, (-851897)
	push	hl
	call	_srand
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	bc, -1845
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 33), hl
	ld	hl, _.str.14
	push	hl
	ld	hl, _.str.13
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	nz, BB13_3
	ld	hl, _.str.15
	push	hl
	ld	hl, _.str.13
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	z, BB13_5
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	bc, -1857
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ti_Write
	jr	BB13_4
BB13_3:
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	bc, -1857
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ti_Read
BB13_4:
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ti_Close
	pop	hl
BB13_5:
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 16
	push	ix
	ld	bc, -1851
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, iy
	ld	bc, -1866
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, 1
	push	hl
	ld	hl, 75
	push	hl
	ld	hl, 65
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 118
	push	hl
	ld	hl, 10
	push	hl
	ld	bc, -1848
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -4194304
	ld	bc, -1845
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 16), hl
	ld	(iy + 19), 64
	ld	hl, -2490368
	ld	(iy + 20), hl
	ld	(iy + 23), 66
	or	a, a
	sbc	hl, hl
	ld	(iy + 28), hl
	ld	(iy + 31), h
	ld	(iy + 32), 1
	ld	(iy), h
	inc	hl
	ld	bc, -1860
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
BB13_6:
	or	a, a
	sbc	hl, hl
	ld	bc, -1854
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
BB13_7:
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jp	nz, BB13_24
	ld	hl, 1
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 32
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, _.str.16
	push	hl
	call	_gfx_PrintString
	pop	hl
	call	_gfx_GetTextX
	push	hl
	pop	de
	ld	bc, -1863
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	hl, 104
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 4
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	bc, -1860
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 136
	push	hl
	ld	bc, -1863
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 33)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	bc, -1848
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawMap
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	pop	hl
	bit	0, (iy + 32)
	jr	nz, BB13_11
BB13_9:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	l, (iy)
	bit	6, a
	jp	nz, BB13_17
	ld	bc, -1863
	lea	iy, ix
	add	iy, bc
	ld	(iy), l
	jp	BB13_18
BB13_11:
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_playerMovement
	pop	hl
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jp	nz, BB13_22
	ld	de, -1845
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy + 16)
	ld	hl, -6291456
	ld	e, 67
	ld	a, (iy + 19)
	call	__fcmp
	jp	m, BB13_23
	ld	bc, (iy + 20)
	ld	hl, 7340032
	ld	a, (iy + 23)
	call	__fcmp
	jp	m, BB13_16
	ld	hl, -21
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 17
	ldir
	ld	(iy + 18), -32
	call	_playerTouchingColor
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	nz, BB13_16
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	ld	hl, 0
	push	ix
	ld	bc, -1854
	push	af
	add	ix, bc
	pop	af
	ld	(ix), hl
	pop	ix
	jp	z, BB13_9
BB13_16:
	ld	hl, -4194304
	ld	(iy + 16), hl
	ld	(iy + 19), 64
	ld	hl, -2490368
	ld	(iy + 20), hl
	ld	(iy + 23), 66
	or	a, a
	sbc	hl, hl
	ld	(iy + 28), hl
	ld	(iy + 31), h
	ld	(iy + 32), 1
	push	ix
	ld	bc, -1854
	add	ix, bc
	ld	(ix), hl
	pop	ix
	jp	BB13_9
BB13_17:
	ld	a, l
	xor	a, 1
	push	ix
	ld	bc, -1863
	add	ix, bc
	ld	(ix), a
	pop	ix
	ld	(iy), a
	ld	(iy + 32), l
BB13_18:
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 17
	ldir
	call	_drawPlayer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -1851
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 17
	ldir
	call	_debugPlayerPosition
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -1863
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
	or	a, a
	jr	z, BB13_21
	ld	bc, -1854
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _.str.2
	push	hl
	ld	bc, -1866
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_drawMenu
	ld	bc, -1854
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	pop	hl
	pop	hl
	pop	hl
	inc	de
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	ld	(ix - 3), bc
	ld	bc, -1854
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), de
	ld	bc, (ix - 3)
	jr	z, BB13_21
	push	de
	ld	hl, _.str.2
	push	hl
	ld	bc, -1866
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_handleMenuMode
	pop	hl
	pop	hl
	pop	hl
BB13_21:
	call	_gfx_SwapDraw
	ld	hl, 50
	push	hl
	call	_delay
	pop	hl
	jp	BB13_7
BB13_22:
	ld	hl, 1
	push	hl
	ld	hl, 75
	push	hl
	ld	hl, 65
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 118
	push	hl
	ld	hl, 10
	push	hl
	ld	bc, -1848
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, -4194304
	ld	(iy + 16), hl
	ld	(iy + 19), 64
	ld	hl, -2490368
	ld	(iy + 20), hl
	ld	(iy + 23), 66
	or	a, a
	sbc	hl, hl
	ld	(iy + 28), hl
	ld	(iy + 31), h
	ld	(iy + 32), 1
	jp	BB13_6
BB13_23:
	ld	hl, 1
	push	hl
	ld	hl, 75
	push	hl
	ld	hl, 65
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 118
	push	hl
	ld	hl, 10
	push	hl
	ld	bc, -1848
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_generateMap
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -4194304
	ld	bc, -1845
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 16), hl
	ld	(iy + 19), 64
	ld	hl, -2490368
	ld	(iy + 20), hl
	ld	(iy + 23), 66
	or	a, a
	sbc	hl, hl
	ld	(iy + 28), hl
	ld	(iy + 31), h
	ld	(iy + 32), 1
	ld	bc, -1860
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 33)
	inc	hl
	ld	(iy + 33), hl
	jp	BB13_6
BB13_24:
	ld	hl, _.str.15
	push	hl
	ld	hl, _.str.13
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jr	z, BB13_26
	push	de
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	bc, -1857
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -1845
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ti_Close
	pop	hl
BB13_26:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"Player Pos: ", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	", ", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"START", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"RanGen CE", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"version: beta 0.4", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"author: ashbit06", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"A remake of a game I made on Scratch.", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"https://scratch.mit.edu/projects/579486353/", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Save Level", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Load Level", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"About", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"Resume", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"RanGen", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"r", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"w", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"LEVEL", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	extern	_fabsf
	extern	__Unwind_SjLj_Register
	extern	_srand
	extern	_malloc
	extern	_log
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__fadd
	extern	__sshl
	extern	_rand
	extern	_ti_Close
	extern	__sand
	extern	_gfx_PrintString
	extern	__ishl
	extern	__ftol
	extern	_ti_Read
	extern	_gfx_PrintInt
	extern	__setflag
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_ti_Open
	extern	__ltof
	extern	_delay
	extern	_free
	extern	__fsub
	extern	__frameset
	extern	_gfx_GetPixel
	extern	_kb_Scan
	extern	_strcmp
	extern	_gfx_GetStringWidth
	extern	_ti_Write
	extern	__ultof
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	__fmul
	extern	_gfx_SetDraw
	extern	_gfx_GetTextX
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	_gfx_FillScreen
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	_gfx_End
	extern	__fcmp
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
